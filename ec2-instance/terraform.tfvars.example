# Copy this file to terraform.tfvars and edit values for your environment.

# Required variables
ami_id           = "ami-0123456789abcdef0"        # AMI ID (REQUIRED)
instance_name    = "app-server-01"               # Name tag for the instance (REQUIRED)
app_instance_type = "t3.medium"                  # EC2 instance type (REQUIRED)
key_name         = "my-keypair"                 # SSH/RDP key pair (REQUIRED)
vpc_id           = "vpc-abc123"                # VPC id (REQUIRED)
private_subnets  = ["subnet-11111111"]          # List of private subnet ids (REQUIRED)
region           = "us-west-2"                  # Optional: region string used in some lookups

# Enable optional behaviors
# If you set enable_kms_alias_lookup = true, ensure the alias exists in this account/region
enable_kms_alias_lookup = false
# If you set ami_lookup_enabled = true, set ami_name_filter and ami_owners appropriately
ami_lookup_enabled = false
ami_name_filter = ""  # e.g. "amzn2-ami-hvm-*-x86_64-gp2"
ami_owners = ["amazon"]

# Optional variables (defaults present in variables.tf)
os_type          = "linux"                      # "linux" or "windows"
root_vol_size    = "100"                        # Root EBS size in GB
ebs_vol_size     = "10"                         # Additional EBS size example

# KMS options (choose one)
# 1) Explicit ARN (recommended for one-off or cross-account):
# kms_key_arn = "arn:aws:kms:us-west-2:123456789012:key/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"

# 2) Alias-based auto-discovery (preferred for standardization):
# Default alias base in module is "alias/ebs-key". The module will attempt to resolve
# an alias named "${kms_key_alias_name_base}-${region}", e.g. "alias/ebs-key-us-west-2".
kms_key_alias_name_base = "alias/ebs-key"

# Security / best practices notes
# - Do NOT commit production KMS ARNs or secrets to source control. Use environment-specific
#   tfvars (excluded from VCS) or a secrets manager.
# - To force a customer key, set `kms_key_arn` explicitly (uncomment and set above).
# - If you want the module to fail when no customer KMS key is resolved, add validation
#   in your root module or ask me to add a strict check.

# -------------------------
# Tagging and metadata
# -------------------------
# Tag variables used by the module. These are REQUIRED values and must be provided.
# NOTE: RPO and RTO are required but are applied only to the EC2 instance (EC2-specific tags).
it_owner = "Your Name"            # REQUIRED
BPO = "Business Process Owner"    # REQUIRED
compliance = "Non-GxP"            # REQUIRED
RPO = 24                            # REQUIRED (EC2 only)
RTO = 24                            # REQUIRED (EC2 only)
application = "Infra"              # REQUIRED
environment = "dev"                # REQUIRED
department = "GTS - Infrastructure & Operations"  # REQUIRED


# Example terraform.tfvars for ec2-instance module
# Copy this file to terraform.tfvars and edit values for your environment.

# Required variables
ami_id           = "ami-0123456789abcdef0"
instance_name    = "app-server-01"
app_instance_type = "t3.medium"
key_name         = "my-keypair"
vpc_id           = "vpc-abc123"
private_subnets  = ["subnet-11111111"]
region           = "us-west-2"

# Tag variables (all REQUIRED)
it_owner    = "Your Name"
BPO         = "Business Process Owner"
compliance  = "Non-GxP"
RPO         = 24
RTO         = 24
application = "Infra"
environment = "dev"
department  = "GTS - Infrastructure & Operations"

# Example security group rules (CSV format supported by module)
# Format: "<port or port-range>,<protocol>,<source>,<description>"
# Where <source> can be a CIDR (e.g. 10.8.0.0/24), a security-group id (sg-...), or a prefix-list id (pl-...)
# Examples:
# Single port + CIDR
# sg_rules_ec2 = ["22,tcp,10.8.126.221/32,AWS WorkSpaces Vaibhav Jain"]
# Mixed rules: CIDR, SG id, and prefix list
# sg_rules_ec2 = [
#   "22,tcp,10.8.126.221/32,AWS WorkSpaces Vaibhav Jain",
#   "22,tcp,sg-0fcb234cc5d0621ab,Allow ansible SG",
#   "8085-8088,tcp,pl-00a54069,Allow ansible prefix list"
# ]

